import java.awt.*;
import java.awt.event.*;
import java.util.Timer;
import java.util.TimerTask;

public class TrafficLightControllerApp {
    private Frame frame;
    private TrafficLightPanel lightPanel;
    private Timer timer;

    public TrafficLightControllerApp() {
        // Initialize AWT components
        frame = new Frame("Real-Time Traffic Light Controller");
        frame.setSize(800, 600);
        frame.setLayout(new BorderLayout());

        // Custom Traffic Light Panel
        lightPanel = new TrafficLightPanel();
        frame.add(lightPanel, BorderLayout.CENTER);

        // Control Panel with understandable button names
        Panel controlPanel = new Panel();
        Button startSimulationButton = new Button("Start Traffic Simulation");
        Button emergencyModeButton = new Button("Activate Emergency Mode");
        controlPanel.add(startSimulationButton);
        controlPanel.add(emergencyModeButton);
        frame.add(controlPanel, BorderLayout.SOUTH);

        // Set up button actions
        startSimulationButton.addActionListener(e -> lightPanel.startTrafficSimulation());
        emergencyModeButton.addActionListener(e -> lightPanel.activateEmergencyMode());

        // Set up frame close behavior
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        frame.setVisible(true);

        // Start real-time updates for countdowns
        startRealTimeUpdates();
    }

    // Start real-time updates for countdowns
    private void startRealTimeUpdates() {
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                lightPanel.updateCountdown();
            }
        }, 0, 1000); // Update every 1 second
    }

    public static void main(String[] args) {
        new TrafficLightControllerApp();
    }

    // Custom Panel for traffic light representation
    private static class TrafficLightPanel extends Panel {
        private String currentLight = "RED";
        private int duration = 30; // Example duration
        private boolean emergencyMode = false;
        private int trafficDensity = 50; // Example traffic density

        @Override
        public void paint(Graphics g) {
            setBackground(new Color(240, 240, 240)); // Light gray background

            // Draw traffic light frame
            g.setColor(Color.BLACK);
            g.fillRect(300, 50, 200, 400);

            // Draw lights
            drawTrafficLight(g, Color.RED, 350, 75, currentLight.equals("RED"));
            drawTrafficLight(g, Color.YELLOW, 350, 200, currentLight.equals("YELLOW"));
            drawTrafficLight(g, Color.GREEN, 350, 325, currentLight.equals("GREEN"));

            // Show duration countdown
            g.setColor(Color.BLACK);
            g.setFont(new Font("Arial", Font.BOLD, 20));
            g.drawString("Time Remaining: " + duration + "s", 320, 470);

            // Emergency mode indicator
            if (emergencyMode) {
                g.setColor(Color.ORANGE);
                g.setFont(new Font("Arial", Font.BOLD, 16));
                g.drawString("EMERGENCY MODE ACTIVE", 320, 500);
            }

            // Display traffic density
            g.setColor(Color.BLUE);
            g.setFont(new Font("Arial", Font.PLAIN, 14));
            g.drawString("Traffic Density: " + trafficDensity + "%", 320, 530);
        }

        private void drawTrafficLight(Graphics g, Color color, int x, int y, boolean active) {
            g.setColor(active ? color : Color.GRAY);
            g.fillOval(x, y, 100, 100);
        }

        // Start traffic simulation with real-time data
        public void startTrafficSimulation() {
            trafficDensity = fetchRealTimeTrafficDensity(); // Fetch real-time traffic density
            adjustLightDurations();
            repaint();
        }

        // Activate emergency mode (extend green light duration)
        public void activateEmergencyMode() {
            emergencyMode = !emergencyMode;
            if (emergencyMode) {
                setCurrentLight("GREEN", 60); // Extend green light duration in emergency mode
            } else {
                startTrafficSimulation();
            }
            repaint();
        }

        // Fetch real-time traffic density (placeholder method)
        private int fetchRealTimeTrafficDensity() {
            // Replace with actual API/sensor data fetching logic
            return (int) (Math.random() * 100);
        }

        // Adjust light durations based on traffic density
        private void adjustLightDurations() {
            if (trafficDensity > 70) {
                setCurrentLight("GREEN", 40); // More green time for high traffic
            } else if (trafficDensity > 30) {
                setCurrentLight("YELLOW", 10); // Moderate yellow time
            } else {
                setCurrentLight("RED", 20); // Shorter red time for low traffic
            }
        }

        // Set the current light and duration
        public void setCurrentLight(String light, int duration) {
            this.currentLight = light;
            this.duration = duration;
        }

        // Update countdown timer
        public void updateCountdown() {
            if (duration > 0) {
                duration--;
                repaint();
            } else {
                startTrafficSimulation(); // Cycle to next light state
            }
        }
    }
}
